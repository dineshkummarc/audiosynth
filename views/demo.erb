<!-- 



HTML5 Audio spec implementation (looping and playback)
http://www.w3schools.com/html5/att_audio_loop.asp


music is math - notes + frequencies
http://members.cox.net/mathmistakes/music.htm


Phasing FX.
http://www.math.montana.edu/frankw/ccp/before-calculus/trigonometry/soundtrg/body.htm

Distinction between differents wave type (swatooh, square, and sins)
http://en.wikipedia.org/wiki/Sine_wave

http://en.wikipedia.org/wiki/Harmonics




Phaser FX
http://en.wikipedia.org/wiki/Phaser_(effect)


Binaural recording
http://www.wired.com/threatlevel/2010/07/digital-drugs/
That is one positive use, to quit a drug. Other binaural beats are to help sleeping, positive thoughts, other good things. I've tried Gates of Hades and I couldn't finish listening to it. It is freaky. I-Doser wasn't kidding. I-Doser makes some of the most extreme binaural beats around. I'd like to NOTE that everyone reacts the same to a binaural beats. For example I could listen to a binaural beats like I-Doser's Cliffhanger (meant to feel like I'm on the edge of a clifft) and feel the full effect while someone else who tries it feels nothing. Doesn't work for everyone! Get that through your head

http://en.wikipedia.org/wiki/Binaural_beats

Brain waves
Main article: Electroencephalography
Frequency range	Name	Usually associated with:
> 40 Hz	Gamma waves	Higher mental activity, including perception, problem solving, fear, and consciousness
13–39 Hz	Beta waves	Active, busy or anxious thinking and active concentration, arousal, cognition, and or paranoia
7–13 Hz	Alpha waves	Relaxation (while awake), pre-sleep and pre-wake drowsiness, REM sleep, Dreams
4–7 Hz	Theta waves	deep meditation/relaxation, NREM sleep
< 4 Hz	Delta waves	Deep dreamless sleep, loss of body awareness



// LFO
http://en.wikipedia.org/wiki/Low-frequency_oscillation

An LFO can be routed to control, for example, the frequency of the audio oscillator, its phase, stereo panning, filter frequency, or amplification. When routed to control pitch, an LFO creates vibrato. When an LFO modulates amplitude (volume), it creates tremolo. On most synthesizers and sound modules, LFOs feature several controllable parameters, which often include a variety of different waveforms, a rate control, routing options (as described above), a tempo sync feature, and an option to control how much the LFO will modulate the audio signal.
Electronic musicians use LFO for a variety of applications. They may be used to add simple vibrato or tremolo to a melody, or for more complex applications such as triggering gate envelopes, or controlling the rate of arpeggiation.
Differences between LFO rates also account for a number of commonly heard effects in modern music. A very low rate can be used to modulate a filter's cutoff frequency, thereby providing the characteristic gradual sensation of the sound becoming clearer or closer to the listener. Alternatively, a high rate can be used for bizarre 'rippling' sound effects (indeed, another important use of LFO would be for various sound effects used in films). Such effects are difficult to describe, and are more understandable when heard. Dubstep is a form of electronic music that employs heavy use of LFOs for bass sounds that have a "generic wobble" effect.



-->




<html>
<head>
<title>HTML5 audio experiment - JavaScript sound synthesis and audio encoding</title>
</head>
<body>
<link rel="stylesheet" href="sh_style.css">
<link href='http://fonts.googleapis.com/css?family=Droid+Sans+Mono' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Droid+Sans' rel='stylesheet' type='text/css'>
<!-- 
<script src="sh_main.min.js"></script>
<script src="sh_javascript.min.js"></script>-->
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js"></script>
<script src="riffwave.js"></script>

<style>
body { font-family: "Droid Sans"; margin: 16px 32px; }
pre { font-family: "Droid Sans Mono"; }
button { font-family: "Droid Sans"; font-size: 150%; }
</style>

<script>

keyNotes = {
  "q": -12,
  "w": -9,
  "e": -8,
  "r": -6,
  "t": -5,
  "y": -4,
  "u": -2,
  "i": 0,
  "o": 2,
  "p": 3,
  "a": 5,
  "s": 7,
  "d": 8,
  "f": 9,
  "g": 12,
  "h": 14,
  "j": 15,
  "i": 24,
  "l": 26,
  "z": 32,
  "x": 36,
  "c": 37,
  "v": 39,
  "b": 40,
  "n": 44,
  "m": 48
}




$(document).ready(function() {
// alert('doc ready!');

count=0;
$(document).keypress(function(e) {
  //if(count){ a.stop(); }
  if ( e.which == 13 ) { //enter...
     event.preventDefault();
   }else if(e.which == 32 ){ //spacebar
     //TODO: Stop All audio!
     a.stop();
   }else{
  var c = String.fromCharCode(e.which);//alert(c +" - " + e.which);
  var note = keyNotes[c.toLowerCase()];
  
  if (c == c.toLowerCase()){
    // The character is lowercase
    var shape = 'sine';
  }else{
    // The character is uppercase
    var shape = 'square';
  }
  
  a = buildSound(note, shape);
  a.play();
  count++
  }
});


}); //eo doc ready...

// NOTES

var volume = 1;// float, vary from 0 to 1;


baseFreq = 440; // middle A frequency, in hz
musicScale = 12; //chromatic 12-note pattern
freqRatio  = Math.pow(2, 1/musicScale);  //multiplier of half-tones //returns maginc number : 1.0594630943593





function buildSound(note, shape){
  var waveShape = shape; // square, sin, tri, or swa
  var rndtone = 4+ Math.round(3 * Math.random()); //5 = default
  var sine = []; 
  var freq = getFreq(note) /baseFreq;
  freq = freq * 44.1; // !!! MAGIC NUMBER, arbitrary, I don't know what is the multiplier for 44khz... guessed...


  var vol = volume *255 /2;
  noiseLvl = 0; //1; // peut varier de 0, 0.01, à 20 (après ça ce n'Est que du white-noise)
  for (var i=0; i<50000; i++) {
      noiseRnd =  (Math.random()*noiseLvl) - (noiseLvl /2); //on ajoute ou soustrait une valeur au hasard
      val = vol+(vol*Math.sin(i * (1/ freq )+noiseRnd )); // 128+(127*Math.sin(i / 5));
      if(waveShape == 'square'){
        val = Math.round(val/255)*255;
      }

      sine[i] = Math.round(val);
      //160 = low
      // 40 = middle
      // 5 = high pitch
      // donc inversement proportionel à la Fre reelegf
        // SIN returns -127 to 127, so we have a full, 255 (one bit) Amplitude (volume) of sound
  }
   var wave2 = new RIFFWAVE();
  wave2.header.sampleRate = 44100; // set sample rate to 44KHz
  //wave2.header.bitsPerSample = 16;
  wave2.Make(sine);
  var audio2 = new Audio(wave2.dataURI);
  audio2.loop=0;

  return audio2;
  
  
  
}





function getFreq(noteDiff){
  //This function return a note frequency based on the number of half-tone increments received (-100 to 100)
  noteDiff = noteDiff * -1; //twisted way to have them vary the other way around...
  // !! NASTY
  var freqDiff = Math.pow(freqRatio, noteDiff);
  var newFreq = freqDiff * baseFreq;
  return newFreq;
}




// NOISE
var noise = []; for (var i=0; i<10000; i++) noise[i] = Math.round(128*Math.random());
var wave1 = new RIFFWAVE(noise);
var audio1 = new Audio(wave1.dataURI);


// SINE WAVE

function revertFreq(ori){
  var freq = ori;
  freq = ori;

  var f = freq - 40; //zeroed
  f = f * -1;   // (we rever the base)
  f = f +40;
  return f;
}

/*
var rndtone = 4+ Math.round(3 * Math.random()); //5 = default
var sine = []; for (var i=0; i<10000; i++) sine[i] = 128+Math.round(127*Math.sin(i/rndtone));
var wave2 = new RIFFWAVE(sine);
// var audio2 = new Audio(wave2.dataURI);
*/

// SINE WAVE
var rndtone = 4+ Math.round(3 * Math.random()); //5 = default
var rnd = 0;//Math.random()*20;
var sine = []; 

var freq = getFreq(-12) /440;
freq = freq * 44.1; // !!! MAGIC NUMBER, arbitrary, I don't know what is the multiplier for 44khz... guessed...


var vol = volume *255 /2;
noiseLvl = 0; //1; // peut varier de 0, 0.01, à 20 (après ça ce n'Est que du white-noise)
for (var i=0; i<500000; i++) {
    noiseRnd =  (Math.random()*noiseLvl) - (noiseLvl /2); //on ajoute ou soustrait une valeur au hasard
    val = vol+(vol*Math.sin(i * (1/ freq )+noiseRnd )); // 128+(127*Math.sin(i / 5));
    if(waveShape != 'square'){
      val = Math.round(val/255)*255;
    }
    
    sine[i] = Math.round(val);
    //160 = low
    // 40 = middle
    // 5 = high pitch
    // donc inversement proportionel à la Fre reelegf
      // SIN returns -127 to 127, so we have a full, 255 (one bit) Amplitude (volume) of sound
}
var wave2 = new RIFFWAVE();
wave2.header.sampleRate = 44100; // set sample rate to 44KHz
//wave2.header.bitsPerSample = 16;
wave2.Make(sine);
var audio2 = new Audio(wave2.dataURI);
audio2.loop=1;


// Square...
var rndtone = 4+ Math.round(3 * Math.random()); //5 = default
var rnd = 4+ Math.round(10 * Math.random());//Math.random()*20;
var square = []; 
for (var i=0; i<10000; i++) {
  if (i % 100 > 50 ) {
    square[i] = 100 + Math.round(rnd);
  }else{
    square[i] = 50 + Math.round(rnd);
  }
}
var wave6 = new RIFFWAVE(square);
var audio6 = new Audio(wave6.dataURI);



// EFFECT
var effect = []; for (var i=0; i<35000; i++) effect[i] = 64+Math.round(32*(Math.cos(i*i/2000)+Math.sin(i*i/4000)));
var wave3 = new RIFFWAVE();
wave3.header.sampleRate = 22000;
wave3.Make(effect);
var audio3 = new Audio(wave3.dataURI);

// STEREO
var wave4 = new RIFFWAVE();
wave4.header.sampleRate = 44100;
wave4.header.numChannels = 2;
var i = 0;
var stereo = [];
while (i<100000) {
  stereo[i++] = 0;
  stereo[i++] = 128+Math.round(127*Math.sin(i/50));
}
while (i<200000) {
  stereo[i++] = 128+Math.round(127*Math.sin(i/50));
  stereo[i++] = 0;
}
wave4.Make(stereo);
var audio4 = new Audio(wave4.dataURI);



function play(audio) {
  if (!audio.paused) { // if playing stop and rewind
    audio.pause();
    audio.currentTime = 0;
  }
  audio.play();
}



// 5. To be refined...

var audio5 = new Audio(); // create the HTML5 audio element
var wave5 = new RIFFWAVE(); // create an empty wave file
var data5 = []; // yes, it's an array

wave5.header.sampleRate = 44100; // set sample rate to 44KHz
wave5.header.numChannels = 2; // two channels (stereo)

var i = 0;
while (i<100000) { 
  data5[i++] = 128+Math.round(127*Math.sin(i/10)); // left speaker
  data5[i++] = 128+Math.round(127*Math.sin(i/200)); // right speaker
}

wave5.Make(data5); // make the wave file
audio5.src = wave5.dataURI; // set audio source
// audio5.play(); // we should hear two tones one on each speaker





</script>

<!-- 
<h1>riffwave.js - HTML5 sound synthesis via PCM encoding</h1>



<h2>What?</h2>

<p>"<strong>riffwave.js</strong>" is a tiny javascript library that encodes audio 
data to a format (<a href="http://en.wikipedia.org/wiki/Pulse-code_modulation">PCM</a>
inside a <a href="http://en.wikipedia.org/wiki/RIFF_(File_format)">RIFF container</a>) that
can be used to play synthesized sounds with the
<a href="http://en.wikipedia.org/wiki/Html5_audio#Audio_format_support">HTML5 audio</a> element.</p>

<p>Simply use the generated <a href="http://en.wikipedia.org/wiki/Data_Uri">data URI</a> as source.</p>

<p>Works in:</p>
<ul>
<li>Chrome 9</li>
<li>Firefox 3.6</li>
<li>Opera 11</li>
</ul>
<p>Other browsers not tested. Problem IE?</p>

<p><span style="border:1px solid #ccc;font-size:100%;padding:4px;16px">
Download <strong><a href="riffwave.js">riffwave.js</a></strong> (version 0.02)
</span></p>
-->
<h2>tests</h2>

<button onmousedown="play(audio1);">Noise</button>
<button onmousedown="play(audio2);">Sine wave</button>
<button onmousedown="play(audio6);">square wave</button>
<button onmousedown="play(audio3);">Effect</button>
<button onmousedown="play(audio4);">Stereo</button>
<button onmousedown="play(audio5);">5</button>
<!-- 
<h2>Sample usage</h2>

<pre class="sh_javascript">
var data = []; // just an array
for (var i=0; i<10000; i++) data[i] = Math.round(255 * Math.random()); // fill data with random samples
var wave = new RIFFWAVE(data); // create the wave file
var audio = new Audio(wave.dataURI); // create the HTML5 audio element
audio.play(); // some noise
</pre>

<h2>Another one</h2>
<pre class="sh_javascript">
var audio = new Audio(); // create the HTML5 audio element
var wave = new RIFFWAVE(); // create an empty wave file
var data = []; // yes, it's an array

wave.header.sampleRate = 44100; // set sample rate to 44KHz
wave.header.numChannels = 2; // two channels (stereo)

var i = 0;
while (i<100000) { 
  data[i++] = 128+Math.round(127*Math.sin(i/10)); // left speaker
  data[i++] = 128+Math.round(127*Math.sin(i/200)); // right speaker
}

wave.Make(data); // make the wave file
audio.src = wave.dataURI; // set audio source
audio.play(); // we should hear two tones one on each speaker
</pre>
-->


<hr>
<!-- 
<p>by Pedro Ladaria &lt;pedro.ladaria at gmail dot com&gt;</br>
twitter: @pladaria</p>
<p><a href="http://www.codebase.es">Go home</a></p>
-->
</body>
</html>
